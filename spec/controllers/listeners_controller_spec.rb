require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ListenersController do
  login_user

  # This should return the minimal set of attributes required to create a valid
  # Listener. As you add validations to Listener, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    b = Balancer.create!(name: "blarg-role", primary: false)
    {
        from: "HTTP:80",
        to: "HTTP:80",
        balancer: b
    }
  end
  #
  #describe "GET index" do
  #  it "assigns all listeners as @listeners" do
  #    listener = Listener.create! valid_attributes
  #    get :index, {}
  #    assigns(:listeners).should eq([listener])
  #  end
  #end
  #
  #describe "GET show" do
  #  it "assigns the requested listener as @listener" do
  #    listener = Listener.create! valid_attributes
  #    get :show, {:id => listener.to_param}
  #    assigns(:listener).should eq(listener)
  #  end
  #end
  #
  #describe "GET new" do
  #  it "assigns a new listener as @listener" do
  #    get :new, {}
  #    assigns(:listener).should be_a_new(Listener)
  #  end
  #end
  #
  #describe "GET edit" do
  #  it "assigns the requested listener as @listener" do
  #    listener = Listener.create! valid_attributes
  #    get :edit, {:id => listener.to_param}
  #    assigns(:listener).should eq(listener)
  #  end
  #end
  #
  #describe "POST create" do
  #  describe "with valid params" do
  #    it "creates a new Listener" do
  #      expect {
  #        post :create, {:listener => valid_attributes}
  #      }.to change(Listener, :count).by(1)
  #    end
  #
  #    it "assigns a newly created listener as @listener" do
  #      post :create, {:listener => valid_attributes}
  #      assigns(:listener).should be_a(Listener)
  #      assigns(:listener).should be_persisted
  #    end
  #
  #    it "redirects to the created listener" do
  #      post :create, {:listener => valid_attributes}
  #      response.should redirect_to(Listener.last)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns a newly created but unsaved listener as @listener" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Listener.any_instance.stub(:save).and_return(false)
  #      post :create, {:listener => {}}
  #      assigns(:listener).should be_a_new(Listener)
  #    end
  #
  #    it "re-renders the 'new' template" do
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Listener.any_instance.stub(:save).and_return(false)
  #      post :create, {:listener => {}}
  #      response.should render_template("new")
  #    end
  #  end
  #end
  #
  #describe "PUT update" do
  #  describe "with valid params" do
  #    it "updates the requested listener" do
  #      listener = Listener.create! valid_attributes
  #      # Assuming there are no other listeners in the database, this
  #      # specifies that the Listener created on the previous line
  #      # receives the :update_attributes message with whatever params are
  #      # submitted in the request.
  #      Listener.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
  #      put :update, {:id => listener.to_param, :listener => {'these' => 'params'}}
  #    end
  #
  #    it "assigns the requested listener as @listener" do
  #      listener = Listener.create! valid_attributes
  #      put :update, {:id => listener.to_param, :listener => valid_attributes}
  #      assigns(:listener).should eq(listener)
  #    end
  #
  #    it "redirects to the listener" do
  #      listener = Listener.create! valid_attributes
  #      put :update, {:id => listener.to_param, :listener => valid_attributes}
  #      response.should redirect_to(listener)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns the listener as @listener" do
  #      listener = Listener.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Listener.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => listener.to_param, :listener => {}}
  #      assigns(:listener).should eq(listener)
  #    end
  #
  #    it "re-renders the 'edit' template" do
  #      listener = Listener.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      Listener.any_instance.stub(:save).and_return(false)
  #      put :update, {:id => listener.to_param, :listener => {}}
  #      response.should render_template("edit")
  #    end
  #  end
  #end
  #
  #describe "DELETE destroy" do
  #  it "destroys the requested listener" do
  #    listener = Listener.create! valid_attributes
  #    expect {
  #      delete :destroy, {:id => listener.to_param}
  #    }.to change(Listener, :count).by(-1)
  #  end
  #
  #  it "redirects to the listeners list" do
  #    listener = Listener.create! valid_attributes
  #    delete :destroy, {:id => listener.to_param}
  #    response.should redirect_to(listeners_url)
  #  end
  #end

end
